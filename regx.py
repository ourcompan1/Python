# это шаблон по которому осуществляется поиск
# квантификаторы - когда мы можем показать колво повторений данного шаблона

import re         # модуль регулярных выражений


# a = 'ABC!ABD!ABB!ABA!AAB!?'
# h = re.match('ABB', a)         # метод матч осуществляет поиск в начале строки
# h = re.search('ABD', a)      # метод серч выводит то что увидит первым если таковых много одинаковых
# print(h[0])
# print(h)
# s = re.findall('AB', a)            # метод выводящий список подходящих под поиск
# print(s)
# g = re.split('!', a, maxsplit=0)             # метод который разбивает слова между выбраным элементом и вносит в список , так же 3 значением мы можем задать колво разбиений
# print(g)
# o = re.sub('!', '.', a)      # метод заменяющий аргумент1 на аргумент2
# n = re.fullmatch('AB', a)         # метод проверяющий полное совпадение
# print(o, n)


# t = 'Hello , hyi, hyihello, hyi1, hyi2 , hyi100 '
# match = re.findall('\\bhyi\\b', t) # \\b word \\b выдает мне только конкретное слово запрашиваемое в регулярном выражении без этого только запрашиваемое сочетание
# match = re.findall(r'\bhyi\b', t) # или так
# print(match)

s = '87+87+56,!!! ------------------- 1000-7 , HHHGGGRETRET/'
# r = re.search(r'\d\d\d\d.7', s) # точка в любом месте поиска обознает символ который подставится в зависимости от ситуации
# r = re.search(r'[RETG]', s) # [] указываю набор символов и выведтся реузльтат если хотя бы 1 из них найдется
# r = re.search(r'[2-9]', s)  # промежуток цифр смысл как и в прошлой линии
# r = re.search(r'H|8', s) #  a|b выведет или а или б то что найдет первее
# r = re.search(r'\d{4}', s) # {} квантификатор
# r = re.search(r'\d{1,3}', s) # промежутки квантификатора
r = re.search(r'\d{4,}', s) # не менее чем n-цифры идущие подряд и {,4} - не более ...


print(r)

# \d ищет цифры \D ищет все кроме цифр \s ищет пробельные символы \S ищет не пробельные символы
# \w любая буква . цифра и нижнее подчеркивание , \W все кроме буквы цифры _ , \b указывает начало или конец слово
# \B не укажет начало или конец слово .








